 

import requests 

from datetime import date, timedelta 

from bs4 import BeautifulSoup 

 

 

def fetch_for_date(d: date): 

    """ 

    L·∫•y k·∫øt qu·∫£ x·ªï s·ªë mi·ªÅn B·∫Øc cho 1 ng√†y c·ª• th·ªÉ. 

    ∆Øu ti√™n l·∫•y t·ª´ ketqua.net, n·∫øu l·ªói s·∫Ω t·ª± fallback sang xskt.net. 

    Tr·∫£ v·ªÅ list g·ªìm 27 s·ªë (theo th·ª© t·ª± c√°c gi·∫£i). 

    """ 

    date_str = d.strftime("%d-%m-%Y") 

 

    # Danh s√°ch c√°c ngu·ªìn d·ª± ph√≤ng 

    urls = [ 

        f"https://ketqua.net/xo-so-mien-bac-ngay-{date_str}", 

        f"https://xskt.net/xo-so-mien-bac-ngay-{date_str}", 

    ] 

 

    for url in urls: 

        print(f"üîπ Fetching: {url}") 

        try: 

            r = requests.get(url, timeout=15) 

            r.raise_for_status() 

            html = r.text 

 

            soup = BeautifulSoup(html, "html.parser") 

 

            # T√¨m t·∫•t c·∫£ c√°c s·ªë trong b·∫£ng k·∫øt qu·∫£ 

            numbers = [span.text.strip() for span in soup.select("td span, div span") if span.text.strip().isdigit()] 

 

            # L·ªçc b·ªè s·ªë tr√πng v√† ch·ªâ l·∫•y 27 s·ªë ƒë·∫ßu ti√™n 

            unique_numbers = [] 

            for n in numbers: 

                if n not in unique_numbers: 

                    unique_numbers.append(n) 

            result = unique_numbers[:27] 

 

            if len(result) >= 10: 

                print(f"‚úÖ L·∫•y d·ªØ li·ªáu ng√†y {d} th√†nh c√¥ng ({len(result)} s·ªë).") 

                return result 

            else: 

                print(f"‚ö†Ô∏è S·ªë l∆∞·ª£ng k·∫øt qu·∫£ √≠t ({len(result)}), th·ª≠ ngu·ªìn kh√°c...") 

 

        except Exception as e: 

            print(f"‚ö†Ô∏è L·ªói khi l·∫•y t·ª´ {url}: {e}") 

 

    print(f"‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu ng√†y {d}.") 

    return [] 

 

 

def fetch_range(days: int): 

    """ 

    L·∫•y d·ªØ li·ªáu nhi·ªÅu ng√†y g·∫ßn nh·∫•t. 

    Tr·∫£ v·ªÅ dict: { 'YYYY-MM-DD': [list 27 s·ªë], ... } 

    """ 

    results = {} 

    today = date.today() 

    for i in range(days): 

        d = today - timedelta(days=i) 

        arr = fetch_for_date(d) 

        results[d.isoformat()] = arr 

    return results 

 

 

if __name__ == "__main__": 

    # Test ri√™ng file n√†y 

    print("üß™ ƒêang test fetch cho h√¥m nay...") 

    today = date.today() 

    data = fetch_for_date(today) 

    print(f"K·∫øt qu·∫£: {data}") 
